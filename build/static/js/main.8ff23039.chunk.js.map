{"version":3,"sources":["types.ts","utils/typeCheckers.ts","utils/validateOrders.ts","hooks/useFetchOrders.ts","constants.ts","utils/dataHelpers.ts","hooks/useData.ts","components/TopBar.tsx","App.tsx","index.tsx"],"names":["Gender","ProducerName","isObject","obj","Object","isString","text","String","isArray","arr","Array","parseId","id","Error","parseDistrict","district","includes","isHealthcareDistrict","parseDate","date","Boolean","Date","parse","isDate","parseString","str","parseNumber","num","Number","isNumber","parseProducer","producer","isProducer","parseGender","gender","param","values","parseSrcBottle","bottle","parseVaccinations","vaccinations","map","vax","vaccination","vaccinationId","sourceBottle","injected","parseVaccination","parseProducerArrays","data","producers","SolarBuddhica","Zerpfy","Antiqua","newOrders","forEach","order","orderId","healthCareDistrict","orderNumber","responsiblePerson","injections","arrived","vaccine","parseOrder","validateOrders","keys","err","hasManufacturers","initData","useFetchOrders","useState","orders","setOrders","error","setError","useEffect","a","axios","get","resp","body","fetchData","ordersBefore","filter","isBefore","ordersOn","isSameDay","getVaccinationCount","flatMap","length","getDoseCount","reduce","acc","val","getMainCounts","doses","emptyOrders","emptyCounts","emptyVaccinations","useData","ordersBeforeDate","setOrdersBeforeDate","cumulativeCounts","setCumulativeCounts","ordersOnDate","setOrdersOnDate","countsOnDate","setCountsOnDate","vaccinationsToday","setVaccinationsToday","dosesToday","getOrdersBeforeDate","getOrdersOnDate","getVaccinationsOnDate","TopBar","setDate","AppBar","position","Toolbar","Typography","variant","style","marginRight","utils","DateFnsUtils","disableToolbar","className","format","label","value","onChange","newDate","KeyboardButtonProps","App","firstDates","key","sort","b","getTime","getLatestDate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ff23039.chunk.js","sourcesContent":["export type HealthCareDistrict = 'HYKS' | 'KYS' | 'OYS' | 'TAYS' | 'TYKS';\n\nexport enum Gender {\n    'Male' = 'male',\n    'Female' = 'female',\n    'Other' = 'nonbinary'\n}\n\nexport enum ProducerName {\n    SolarBuddhica = 'SolarBuddhica',\n    Zerpfy = 'Zerpfy',\n    Antiqua = 'Antiqua'\n}\n\nexport type Vaccination = {\n    vaccinationId: string;\n    gender: Gender;\n    sourceBottle: string;\n    injected: Date;\n}\n\nexport type Order = {\n    orderId: string,\n    healthCareDistrict: HealthCareDistrict,\n    orderNumber: number,\n    responsiblePerson: string,\n    injections: number,\n    arrived: Date,\n    vaccine: ProducerName\n    vaccinations: Vaccination[]\n};\n\nexport type Orders = {\n    [key in ProducerName]: Order[]\n};\n\nexport type UnknownOrders = {\n    [key in ProducerName]: unknown[]\n}\n\nexport type Counts = {\n    [key in ProducerName]: {\n        orders: number\n        vaccinations: number,\n        doses: number\n    };\n}\n\nexport type DateAndOrders = {\n    orders: Orders,\n    date: Date\n}\n","import {\n  ProducerName, UnknownOrders, Gender, HealthCareDistrict,\n} from '../types';\n\nexport const isObject = (obj: unknown): obj is Record<string, unknown> => typeof obj === 'object' || obj instanceof Object;\n\nexport const isString = (text: unknown): text is string => typeof text === 'string' || text instanceof String;\n\nexport const isNumber = (num: unknown): num is number => typeof num === 'number' || num instanceof Number;\n\nexport const isDate = (date: string): boolean => Boolean(Date.parse(date));\n\nexport const isArray = (\n  arr: unknown,\n): arr is Array<unknown> => Array.isArray(arr) || arr instanceof Array;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isGender = (param: any): param is Gender => Object.values(Gender).includes(param);\n\n// checks that a given value is in the healthcare district type\nexport const isHealthcareDistrict = (district: unknown): district is HealthCareDistrict => {\n  if (!isString(district)) throw new Error('district must be a string');\n  const districts = ['HYKS', 'KYS', 'OYS', 'TAYS', 'TYKS'];\n  return districts.includes(district);\n};\n\n// Checks that the given string is in the producers array\nexport const isProducer = (producer: string): producer is ProducerName => {\n  const producers = ['SolarBuddhica', 'Zerpfy', 'Antiqua'];\n  return producers.includes(producer);\n};\n\n// Checks that the input data has all the keys in ProducerNames enum\nexport const hasManufacturers = (data: unknown): data is UnknownOrders => {\n  try {\n    if (!isObject(data)) throw new Error('not an object');\n    const producers = Object.keys(ProducerName);\n    producers.forEach((producer) => {\n      if (!Object.keys(data).includes(producer)) {\n        throw new Error('Missing key');\n      }\n      if (!isArray(data[producer])) {\n        throw new Error(`data under key: ${producer} was not an array.`);\n      }\n    });\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n","import {\n  Order, Orders, ProducerName, UnknownOrders, Gender, HealthCareDistrict, Vaccination,\n} from '../types';\n\nimport {\n  isNumber, isString, isObject, isArray, hasManufacturers, isHealthcareDistrict,\n  isDate, isProducer, isGender,\n} from './typeCheckers';\n\nconst parseId = (id: unknown): string => {\n  if (!id || !isString(id)) throw new Error('Invalid or missing id');\n  return id;\n};\n\nconst parseDistrict = (district: unknown): HealthCareDistrict => {\n  if (!district || !isHealthcareDistrict(district)) throw new Error('Invalid or missing healthcare district');\n  return district;\n};\n\nconst parseDate = (date: unknown): Date => {\n  if (!date || !isString(date) || !isDate(date)) {\n    throw new Error('Incorrect or missing date');\n  }\n  return new Date(date);\n};\n\nconst parseString = (str: unknown): string => {\n  if (!str || !isString(str)) throw new Error('Invalid or missing string');\n  return str;\n};\n\nconst parseNumber = (num: unknown): number => {\n  if (num === null || !isNumber(num)) throw new Error('Invalid or missing number');\n  return num;\n};\n\nconst parseProducer = (producer: unknown): ProducerName => {\n  if (!producer || !isString(producer) || !isProducer(producer)) throw new Error('Invalid or missing producer');\n  return ProducerName[producer];\n};\n\nconst parseGender = (gender: unknown):Gender => {\n  if (!gender || !isGender(gender)) throw new Error('Incorrect or missing gender');\n  return gender;\n};\n\nconst parseSrcBottle = (bottle: unknown): string => {\n  if (!bottle || !isString(bottle)) throw new Error('Invalid or missing bottle');\n  return bottle;\n};\n\nconst parseVaccination = (vaccination: unknown): Vaccination => {\n  if (!vaccination || !isObject(vaccination)) throw new Error('vaccination missing or is not an object');\n  return {\n    vaccinationId: parseId(vaccination.vaccinationId),\n    gender: parseGender(vaccination.gender),\n    sourceBottle: parseSrcBottle(vaccination.sourceBottle),\n    injected: parseDate(vaccination.injected),\n  };\n};\n\nconst parseVaccinations = (vaccinations: unknown): Vaccination[] => {\n  if (!isArray(vaccinations)) throw new Error('Vaccinations is not an array');\n  const parsedVaccinations = vaccinations.map((vax) => parseVaccination(vax));\n  return parsedVaccinations;\n};\n\nconst parseOrder = (order: unknown):Order => {\n  if (!isObject(order)) throw new Error('order is not an object');\n  return {\n    orderId: parseId(order.orderId),\n    healthCareDistrict: parseDistrict(order.healthCareDistrict),\n    orderNumber: parseNumber(order.orderNumber),\n    responsiblePerson: parseString(order.responsiblePerson),\n    injections: parseNumber(order.injections),\n    arrived: parseDate(order.arrived),\n    vaccine: parseProducer(order.vaccine),\n    vaccinations: parseVaccinations(order.vaccinations),\n  };\n};\n\n// Parses the arrays under all the keys of an Orders object.\n// and returns the completely parsed Orders.\nconst parseProducerArrays = (data: UnknownOrders): Orders => {\n  const producers = [\n    ProducerName.SolarBuddhica, ProducerName.Zerpfy, ProducerName.Antiqua,\n  ];\n  const newOrders: Orders = {\n    SolarBuddhica: [],\n    Zerpfy: [],\n    Antiqua: [],\n  };\n\n  producers.forEach((producer) => {\n    newOrders[producer] = data[producer]\n      .map((order) => parseOrder(order));\n  });\n  return newOrders;\n};\n\nconst validateOrders = (data: unknown): Orders|null => {\n  try {\n    if (!hasManufacturers(data)) throw new Error('missing manufacturer');\n    const orders = parseProducerArrays(data);\n    return orders;\n  } catch (err) {\n    return null;\n  }\n};\n\nexport default validateOrders;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport { Orders } from '../types';\nimport validateOrders from '../utils/validateOrders';\nimport { apiBaseUrl } from '../constants';\n\nconst initData: Orders = {\n  SolarBuddhica: [],\n  Zerpfy: [],\n  Antiqua: [],\n};\n\nconst useFetchOrders = () => {\n  const [orders, setOrders] = useState<Orders>(initData);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const resp = await axios.get<Orders>(`${apiBaseUrl}orders/`);\n        const body = validateOrders(resp.data);\n        if (body === null) throw new Error('data failed to validate or was null');\n        setOrders(body);\n      } catch (err) {\n        setError(err);\n      }\n    };\n    void fetchData();\n  }, []);\n\n  return { orders, error };\n};\n\nexport default useFetchOrders;\n","/* eslint-disable import/prefer-default-export */\nexport const apiBaseUrl = 'http://localhost:3001/api/';\n","/* eslint-disable import/prefer-default-export */\nimport { isSameDay, isBefore } from 'date-fns';\nimport {\n  Counts, DateAndOrders, Orders, ProducerName, Order, Vaccination,\n} from '../types';\n\nexport const getLatestDate = (data: Orders): Date => {\n  // if we don't have data return current date\n  if (data.SolarBuddhica.length === 0) return new Date();\n  // get all the producer names from the enum so we can loop\n  const keys: (keyof typeof ProducerName)[] = Object\n    .values(ProducerName);\n  // get the latest arrival date of all producers\n  // and return them as date objects. (the data is sorted on the backend)\n  const firstDates = keys.map((key) => new Date(\n    data[key][0].arrived,\n  ));\n  // sort the combined array and return the most recent date.\n  firstDates.sort((a, b) => b.getTime() - a.getTime());\n  return firstDates[0];\n};\n\nexport const ordersBefore = (date: Date, orders: Order[]) => (\n  orders.filter((order) => (isBefore(order.arrived, date)))\n);\n\nexport const ordersOn = (date: Date, orders: Order[]) => (\n  orders.filter((order) => (\n    isSameDay(order.arrived, date)\n  ))\n);\n\nexport const getOrdersBeforeDate = ({ date, orders }: DateAndOrders) => ({\n  SolarBuddhica: ordersBefore(date, orders.SolarBuddhica),\n  Antiqua: ordersBefore(date, orders.Antiqua),\n  Zerpfy: ordersBefore(date, orders.Zerpfy),\n});\n\nexport const getOrdersOnDate = ({ date, orders }: DateAndOrders) => ({\n  SolarBuddhica: ordersOn(date, orders.SolarBuddhica),\n  Antiqua: ordersOn(date, orders.Antiqua),\n  Zerpfy: ordersOn(date, orders.Zerpfy),\n});\n\nexport const getVaccinationCount = (orders: Order[]) => (\n  orders.flatMap((order) => order.vaccinations).length\n);\n\nexport const getDoseCount = (orders: Order[]): number => {\n  const nums = orders.map((order) => order.injections);\n  return nums.reduce((acc, val) => acc + val);\n};\n\nexport const getVaccinationsOnDate = (orders: Orders, date: Date): Vaccination[] => {\n  const allData = [\n    ...orders.Antiqua,\n    ...orders.SolarBuddhica,\n    ...orders.Zerpfy,\n  ];\n  const vaccinations = allData.flatMap((order) => order.vaccinations);\n  return vaccinations\n    .filter((vax) => isSameDay(vax.injected, date));\n};\n\nexport const getMainCounts = (orders: Orders): Counts => ({\n  Antiqua: {\n    orders: orders.Antiqua.length,\n    vaccinations: getVaccinationCount(orders.Antiqua),\n    doses: getDoseCount(orders.Antiqua),\n  },\n  SolarBuddhica: {\n    orders: orders.SolarBuddhica.length,\n    vaccinations: getVaccinationCount(orders.SolarBuddhica),\n    doses: getDoseCount(orders.SolarBuddhica),\n  },\n  Zerpfy: {\n    orders: orders.Zerpfy.length,\n    vaccinations: getVaccinationCount(orders.Zerpfy),\n    doses: getDoseCount(orders.Zerpfy),\n  },\n});\n","import { useState, useEffect } from 'react';\nimport {\n  Counts, DateAndOrders, Orders, Vaccination,\n} from '../types';\nimport {\n  getMainCounts, getOrdersBeforeDate, getOrdersOnDate, getVaccinationsOnDate,\n} from '../utils/dataHelpers';\n\nconst emptyOrders: Orders = {\n  SolarBuddhica: [],\n  Antiqua: [],\n  Zerpfy: [],\n};\nconst emptyCounts: Counts = {\n  SolarBuddhica: {\n    vaccinations: 0,\n    orders: 0,\n    doses: 0,\n  },\n  Antiqua: {\n    vaccinations: 0,\n    orders: 0,\n    doses: 0,\n  },\n  Zerpfy: {\n    vaccinations: 0,\n    orders: 0,\n    doses: 0,\n  },\n};\n\nconst emptyVaccinations: Vaccination[] = [];\n\nconst useData = ({ orders, date }: DateAndOrders) => {\n  const [ordersBeforeDate, setOrdersBeforeDate] = useState(emptyOrders);\n  const [cumulativeCounts, setCumulativeCounts] = useState(emptyCounts);\n  const [ordersOnDate, setOrdersOnDate] = useState(emptyOrders);\n  const [countsOnDate, setCountsOnDate] = useState(emptyCounts);\n  const [vaccinationsToday, setVaccinationsToday] = useState(emptyVaccinations);\n  const dosesToday = vaccinationsToday.length;\n\n  useEffect(() => {\n    setOrdersBeforeDate(getOrdersBeforeDate({ orders, date }));\n    setCumulativeCounts(getMainCounts(ordersBeforeDate));\n    setOrdersOnDate(getOrdersOnDate({ orders, date }));\n    setCountsOnDate(getMainCounts(ordersOnDate));\n    setVaccinationsToday(getVaccinationsOnDate(orders, date));\n  }, [date, orders]);\n\n  // how many vaxes used\n\n  // how many bottles have expired on that day\n\n  // how many vaccines expired before use\n\n  // how many usable vaccines\n\n  // how many vaccines will expire within 4 days\n  return {\n    ordersBeforeDate,\n    cumulativeCounts,\n    ordersOnDate,\n    countsOnDate,\n    dosesToday,\n    vaccinationsToday,\n  };\n};\n\nexport default useData;\n","import { Dispatch, SetStateAction } from 'react';\nimport {\n  AppBar, Toolbar, Typography,\n} from '@material-ui/core';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nconst TopBar = ({ date, setDate }: {\n  date: Date|null, setDate: Dispatch<SetStateAction<Date|null>>\n}) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h4\" style={{ marginRight: '20px' }}>\n        VaxData\n      </Typography>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          disableToolbar\n          className=\"date-picker\"\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          label=\"Pick date to examine\"\n          value={date}\n          onChange={(newDate) => setDate(newDate)}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n      </MuiPickersUtilsProvider>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default TopBar;\n","import './App.css';\nimport { useState, useEffect } from 'react';\nimport useFetchOrders from './hooks/useFetchOrders';\nimport useData from './hooks/useData';\nimport { getLatestDate } from './utils/dataHelpers';\nimport TopBar from './components/TopBar';\n\nfunction App() {\n  const { orders } = useFetchOrders();\n  const [date, setDate] = useState<Date | null>(new Date());\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { ordersBeforeDate } = useData({\n    date: date || new Date(),\n    orders,\n  });\n\n  useEffect(() => {\n    setDate(getLatestDate(orders));\n  }, [orders]);\n\n  return (\n    <div className=\"App\">\n      <TopBar setDate={setDate} date={date} />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}