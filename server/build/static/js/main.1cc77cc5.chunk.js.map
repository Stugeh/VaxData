{"version":3,"sources":["types.ts","utils/typeCheckers.ts","utils/validateOrders.ts","hooks/useFetchOrders.ts","constants.ts","utils/dataHelpers.ts","hooks/useData.ts","components/TopBar.tsx","utils/chartFormatters.ts","components/BarChart.tsx","components/ChartContainer.tsx","App.tsx","index.tsx"],"names":["Gender","ProducerName","isObject","obj","Object","isString","text","String","isArray","arr","Array","parseId","id","Error","parseDistrict","district","includes","isHealthcareDistrict","parseDate","date","Boolean","Date","parse","isDate","parseString","str","parseNumber","num","Number","isNumber","parseProducer","producer","isProducer","parseGender","gender","param","values","parseSrcBottle","bottle","parseVaccinations","vaccinations","map","vax","vaccination","vaccinationId","sourceBottle","injected","parseVaccination","parseProducerArrays","data","producers","SolarBuddhica","Zerpfy","Antiqua","newOrders","forEach","order","orderId","healthCareDistrict","orderNumber","responsiblePerson","injections","arrived","vaccine","parseOrder","validateOrders","keys","err","hasManufacturers","initData","useFetchOrders","useState","orders","setOrders","error","setError","useEffect","a","axios","get","resp","body","fetchData","ordersBefore","filter","isBefore","addSeconds","ordersOn","isSameDay","getOrdersOnDate","getVaccinationCount","flatMap","length","getDoseCount","nums","reduce","acc","val","getVaccinationsOnDate","getConsumedOrdersCount","getExpiredOrders","addDays","getExpiredOrdersCount","getExpiredDosesCount","expiredDoseCounts","sum","current","getExpiringDoseCount","startDate","endDate","isAfter","b","getArrivedDoses","emptyOrders","emptyCounts","doses","expiredDoses","expiredOrders","consumedOrders","expiringDoses","arrivedDoses","arrivedOrders","useData","ordersBeforeDate","setOrdersBeforeDate","cumulativeCounts","setCumulativeCounts","ordersOnDate","setOrdersOnDate","countsOnDate","setCountsOnDate","priorOrders","getOrdersBeforeDate","ordersToday","priorCounts","counts","getCumulativeCounts","countsToday","expiringOrders","getDailyCounts","TopBar","setDate","AppBar","position","Toolbar","Typography","variant","style","marginRight","utils","DateFnsUtils","disableToolbar","className","format","label","value","onChange","newDate","KeyboardButtonProps","getAvailableDoses","getAvailableOrders","vaccineCountsToChart","chartData","used","available","expired","expiring","totals","orderCountsToBarChart","consumed","BarChart","index","header","Card","indexBy","margin","top","right","bottom","left","padding","indexScale","type","round","colors","scheme","borderColor","from","modifiers","axisBottom","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","ChartContainer","App","firstDates","key","sort","getTime","getLatestDate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cc77cc5.chunk.js","sourcesContent":["export type HealthCareDistrict = 'HYKS' | 'KYS' | 'OYS' | 'TAYS' | 'TYKS';\n\nexport enum Gender {\n    'Male' = 'male',\n    'Female' = 'female',\n    'Other' = 'nonbinary'\n}\n\nexport enum ProducerName {\n    SolarBuddhica = 'SolarBuddhica',\n    Zerpfy = 'Zerpfy',\n    Antiqua = 'Antiqua'\n}\n\nexport type Vaccination = {\n    vaccinationId: string;\n    gender: Gender;\n    sourceBottle: string;\n    injected: Date;\n}\n\nexport type Order = {\n    orderId: string,\n    healthCareDistrict: HealthCareDistrict,\n    orderNumber: number,\n    responsiblePerson: string,\n    injections: number,\n    arrived: Date,\n    vaccine: ProducerName\n    vaccinations: Vaccination[]\n};\n\nexport type Orders = {\n    [key in ProducerName]: Order[]\n};\n\nexport type UnknownOrders = {\n    [key in ProducerName]: unknown[]\n}\n\nexport type Counts = {\n    [key in ProducerName]: {\n        arrivedOrders: number,\n        arrivedDoses: number,\n        orders: number,\n        vaccinations: number,\n        doses: number,\n        expiredDoses: number,\n        expiredOrders: number,\n        consumedOrders: number,\n        expiringDoses: number\n    };\n}\n\nexport type DateAndOrders = {\n    orders: Orders,\n    date: Date\n}\n\nexport type ChartObject = {\n    [key: string]: string | number\n}\n\nexport type LooseObjectObject = {\n    [key: string]: Record<string, unknown>\n}\n\nexport type ChartData = ChartObject[]\n\nexport type DataOutput = {\n    ordersBeforeDate: Orders,\n    cumulativeCounts: Counts,\n    ordersOnDate: Orders,\n    countsOnDate: Counts,\n  }\n","import {\n  ProducerName, UnknownOrders, Gender, HealthCareDistrict,\n} from '../types';\n\nexport const isObject = (obj: unknown): obj is Record<string, unknown> => typeof obj === 'object' || obj instanceof Object;\n\nexport const isString = (text: unknown): text is string => typeof text === 'string' || text instanceof String;\n\nexport const isNumber = (num: unknown): num is number => typeof num === 'number' || num instanceof Number;\n\nexport const isDate = (date: string): boolean => Boolean(Date.parse(date));\n\nexport const isArray = (\n  arr: unknown,\n): arr is Array<unknown> => Array.isArray(arr) || arr instanceof Array;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isGender = (param: any): param is Gender => Object.values(Gender).includes(param);\n\n// checks that a given value is in the healthcare district type\nexport const isHealthcareDistrict = (district: unknown): district is HealthCareDistrict => {\n  if (!isString(district)) throw new Error('district must be a string');\n  const districts = ['HYKS', 'KYS', 'OYS', 'TAYS', 'TYKS'];\n  return districts.includes(district);\n};\n\n// Checks that the given string is in the producers array\nexport const isProducer = (producer: string): producer is ProducerName => {\n  const producers = ['SolarBuddhica', 'Zerpfy', 'Antiqua'];\n  return producers.includes(producer);\n};\n\n// Checks that the input data has all the keys in ProducerNames enum\nexport const hasManufacturers = (data: unknown): data is UnknownOrders => {\n  try {\n    if (!isObject(data)) throw new Error('not an object');\n    const producers = Object.keys(ProducerName);\n    producers.forEach((producer) => {\n      if (!Object.keys(data).includes(producer)) {\n        throw new Error('Missing key');\n      }\n      if (!isArray(data[producer])) {\n        throw new Error(`data under key: ${producer} was not an array.`);\n      }\n    });\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n","import {\n  Order, Orders, ProducerName, UnknownOrders, Gender, HealthCareDistrict, Vaccination,\n} from '../types';\n\nimport {\n  isNumber, isString, isObject, isArray, hasManufacturers, isHealthcareDistrict,\n  isDate, isProducer, isGender,\n} from './typeCheckers';\n\nconst parseId = (id: unknown): string => {\n  if (!id || !isString(id)) throw new Error('Invalid or missing id');\n  return id;\n};\n\nconst parseDistrict = (district: unknown): HealthCareDistrict => {\n  if (!district || !isHealthcareDistrict(district)) throw new Error('Invalid or missing healthcare district');\n  return district;\n};\n\nconst parseDate = (date: unknown): Date => {\n  if (!date || !isString(date) || !isDate(date)) {\n    throw new Error('Incorrect or missing date');\n  }\n  return new Date(date);\n};\n\nconst parseString = (str: unknown): string => {\n  if (!str || !isString(str)) throw new Error('Invalid or missing string');\n  return str;\n};\n\nconst parseNumber = (num: unknown): number => {\n  if (num === null || !isNumber(num)) throw new Error('Invalid or missing number');\n  return num;\n};\n\nconst parseProducer = (producer: unknown): ProducerName => {\n  if (!producer || !isString(producer) || !isProducer(producer)) throw new Error('Invalid or missing producer');\n  return ProducerName[producer];\n};\n\nconst parseGender = (gender: unknown):Gender => {\n  if (!gender || !isGender(gender)) throw new Error('Incorrect or missing gender');\n  return gender;\n};\n\nconst parseSrcBottle = (bottle: unknown): string => {\n  if (!bottle || !isString(bottle)) throw new Error('Invalid or missing bottle');\n  return bottle;\n};\n\nconst parseVaccination = (vaccination: unknown): Vaccination => {\n  if (!vaccination || !isObject(vaccination)) throw new Error('vaccination missing or is not an object');\n  return {\n    vaccinationId: parseId(vaccination.vaccinationId),\n    gender: parseGender(vaccination.gender),\n    sourceBottle: parseSrcBottle(vaccination.sourceBottle),\n    injected: parseDate(vaccination.injected),\n  };\n};\n\nconst parseVaccinations = (vaccinations: unknown): Vaccination[] => {\n  if (!isArray(vaccinations)) throw new Error('Vaccinations is not an array');\n  const parsedVaccinations = vaccinations.map((vax) => parseVaccination(vax));\n  return parsedVaccinations;\n};\n\nconst parseOrder = (order: unknown):Order => {\n  if (!isObject(order)) throw new Error('order is not an object');\n  return {\n    orderId: parseId(order.orderId),\n    healthCareDistrict: parseDistrict(order.healthCareDistrict),\n    orderNumber: parseNumber(order.orderNumber),\n    responsiblePerson: parseString(order.responsiblePerson),\n    injections: parseNumber(order.injections),\n    arrived: parseDate(order.arrived),\n    vaccine: parseProducer(order.vaccine),\n    vaccinations: parseVaccinations(order.vaccinations),\n  };\n};\n\n// Parses the arrays under all the keys of an Orders object.\n// and returns the completely parsed Orders.\nconst parseProducerArrays = (data: UnknownOrders): Orders => {\n  const producers = [\n    ProducerName.SolarBuddhica, ProducerName.Zerpfy, ProducerName.Antiqua,\n  ];\n  const newOrders: Orders = {\n    SolarBuddhica: [],\n    Zerpfy: [],\n    Antiqua: [],\n  };\n\n  producers.forEach((producer) => {\n    newOrders[producer] = data[producer]\n      .map((order) => parseOrder(order));\n  });\n  return newOrders;\n};\n\nconst validateOrders = (data: unknown): Orders|null => {\n  try {\n    if (!hasManufacturers(data)) throw new Error('missing manufacturer');\n    const orders = parseProducerArrays(data);\n    return orders;\n  } catch (err) {\n    return null;\n  }\n};\n\nexport default validateOrders;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport { Orders } from '../types';\nimport validateOrders from '../utils/validateOrders';\nimport { apiBaseUrl } from '../constants';\n\nconst initData: Orders = {\n  SolarBuddhica: [],\n  Zerpfy: [],\n  Antiqua: [],\n};\n\nconst useFetchOrders = () => {\n  const [orders, setOrders] = useState<Orders>(initData);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const resp = await axios.get<Orders>(`${apiBaseUrl}orders/`);\n        const body = validateOrders(resp.data);\n        if (body === null) throw new Error('data failed to validate or was null');\n        setOrders(body);\n      } catch (err) {\n        setError(err);\n      }\n    };\n    void fetchData();\n  }, []);\n\n  return { orders, error };\n};\n\nexport default useFetchOrders;\n","/* eslint-disable import/prefer-default-export */\nexport const apiBaseUrl = 'http://localhost:3001/api/';\n","/* eslint-disable import/prefer-default-export */\nimport {\n  isSameDay, isBefore, addDays, addSeconds, isAfter,\n} from 'date-fns';\nimport {\n  Counts, DateAndOrders, Orders, ProducerName,\n  Order, Vaccination, LooseObjectObject,\n} from '../types';\n\n// gets the date of the latest arrival\nexport const getLatestDate = (data: Orders): Date => {\n  // if we don't have data return current date\n  if (data.SolarBuddhica.length === 0) return new Date();\n  // get all the producer names from the enum so we can loop\n  const keys: (keyof typeof ProducerName)[] = Object\n    .values(ProducerName);\n  // get the latest arrival date of all producers\n  // and return them as date objects. (the data is sorted on the backend)\n  const firstDates = keys.map((key) => new Date(\n    data[key][0].arrived,\n  ));\n  // sort the combined array and return the most recent date.\n  firstDates.sort((a, b) => b.getTime() - a.getTime());\n  return firstDates[0];\n};\n\n// gets orders before given date from an array\nexport const ordersBefore = (date: Date, orders: Order[]) => (\n  orders.filter((order) => (isBefore(order.arrived, addSeconds(date, 1))))\n);\n\n// populates the Orders objects order arrays with\n// all orders that arrived before a given date\nexport const getOrdersBeforeDate = ({ date, orders }: DateAndOrders) => ({\n  SolarBuddhica: ordersBefore(date, orders.SolarBuddhica),\n  Antiqua: ordersBefore(date, orders.Antiqua),\n  Zerpfy: ordersBefore(date, orders.Zerpfy),\n});\n\n// gets orders that arrived on a given date from an array\nexport const ordersOn = (date: Date, orders: Order[]) => (\n  orders.filter((order) => (\n    isSameDay(order.arrived, date)\n  ))\n);\n\n// populates the Orders objects order arrays with\n// all orders that arrived on a given date\nexport const getOrdersOnDate = ({ date, orders }: DateAndOrders) => ({\n  SolarBuddhica: ordersOn(date, orders.SolarBuddhica),\n  Antiqua: ordersOn(date, orders.Antiqua),\n  Zerpfy: ordersOn(date, orders.Zerpfy),\n});\n\n// gets the amount of given vaccinations in an Order[]\nexport const getVaccinationCount = (orders: Order[]) => (\n  orders.flatMap((order) => order.vaccinations).length\n);\n\n// Gets the total amount of doses in an Order[]\nexport const getDoseCount = (orders: Order[]): number => {\n  const nums = orders.map((order) => order.injections);\n  return nums.length === 0\n    ? 0\n    : nums.reduce((acc, val) => acc + val);\n};\n\n// gets all injections given on a date\nexport const getVaccinationsOnDate = (orders: Order[], date: Date): Vaccination[] => {\n  const vaccinations = orders.flatMap((order) => order.vaccinations);\n  return vaccinations\n    .filter((vax) => isSameDay(vax.injected, date));\n};\n\n// counts how many bottles have been completely consumed in an Order[]\nexport const getConsumedOrdersCount = (orders: Order[]) => (\n  orders.filter((order) => (\n    order.injections === order.vaccinations.length\n  )).length\n);\n\n// gets a list of all expired orders\nexport const getExpiredOrders = ({ orders, date }: {orders: Order[], date: Date}) => (\n  orders.filter((order) => isBefore(addDays(order.arrived, 30), date))\n);\n\n// returns the amount of expired orders from an Order[]\nexport const getExpiredOrdersCount = ({ orders, date }: {orders: Order[], date: Date}): number => {\n  const expired = getExpiredOrders({ orders, date });\n  return expired.length;\n};\n\n// Returns number of expired orders\nexport const getExpiredDosesCount = ({ orders, date }: {orders: Order[], date: Date}): number => {\n  const expiredOrders = getExpiredOrders({ orders, date });\n  const expiredDoseCounts = expiredOrders.map((order) => (\n    order.injections - order.vaccinations.length\n  ));\n  if (expiredDoseCounts.length === 0) return 0;\n  return expiredDoseCounts.reduce((sum, current) => sum + current);\n};\n\n// gets number of doses that are expiring within 10 days from an Order[].\nexport const getExpiringDoseCount = ({ orders, date }: { orders: Order[], date: Date }) => {\n  // range of days to filter for\n  const startDate = addDays(date, -30);\n  const endDate = addDays(date, -20);\n\n  const expiringOrders = orders.filter((order) => (\n    isAfter(order.arrived, startDate)\n    && isBefore(order.arrived, endDate)\n  ));\n  return expiringOrders\n    .map((order) => order.injections - order.vaccinations.length)\n    .reduce((a, b) => a + b, 0);\n};\n\nconst getArrivedDoses = (orders: Order[], date: Date): number => {\n  const arrivedOrders = orders.filter((order) => isSameDay(order.arrived, date));\n  return arrivedOrders\n    .map((order) => order.injections)\n    .reduce((a, b) => a + b, 0);\n};\n\nexport const getDailyCounts = ({ orders, date }: DateAndOrders) => {\n  const producers = Object.keys(orders) as (keyof Orders)[];\n  const counts: LooseObjectObject = {};\n  const ordersToday = getOrdersOnDate({ orders, date });\n  const expiringOrders = getOrdersOnDate({ orders, date: addDays(date, -30) });\n  producers.forEach((producer) => {\n    counts[producer] = {\n      arrivedOrders: orders[producer].filter((order) => isSameDay(order.arrived, date)).length,\n      arrivedDoses: getArrivedDoses(orders[producer], date),\n      orders: ordersToday[producer].length,\n      vaccinations: getVaccinationsOnDate(orders[producer], date).length,\n      doses: getDoseCount(ordersToday[producer]),\n      expiredDoses: getExpiredDosesCount({ orders: expiringOrders[producer], date }),\n      expiredOrders: getExpiredOrdersCount({ orders: expiringOrders[producer], date }),\n      consumedOrders: getConsumedOrdersCount(orders[producer]),\n      expiringDoses: getExpiringDoseCount({ orders: orders[producer], date }),\n    };\n  });\n  return counts as Counts;\n};\n\n// Builds a counter object from a given Order[].\n// Date specifies the point before which data is counted.\nexport const getCumulativeCounts = ({ orders, date }: DateAndOrders): Counts => {\n  const producers = Object.keys(orders) as (keyof Orders)[];\n\n  const counts: LooseObjectObject = {};\n\n  producers.forEach((producer) => {\n    counts[producer] = {\n      arrivedOrders: orders[producer].filter((order) => isSameDay(order.arrived, date)),\n      arrivedDoses: getArrivedDoses(orders[producer], date),\n      orders: orders[producer].length,\n      vaccinations: getVaccinationCount(orders[producer]),\n      doses: getDoseCount(orders[producer]),\n      expiredDoses: getExpiredDosesCount({ orders: orders[producer], date }),\n      expiredOrders: getExpiredOrdersCount({ orders: orders[producer], date }),\n      consumedOrders: getConsumedOrdersCount(orders[producer]),\n      expiringDoses: getExpiringDoseCount({ orders: orders[producer], date }),\n    };\n  });\n\n  return counts as Counts;\n};\n","import { useState, useEffect } from 'react';\nimport {\n  Counts, DataOutput, DateAndOrders, Orders,\n} from '../types';\nimport {\n  getCumulativeCounts,\n  getOrdersBeforeDate,\n  getOrdersOnDate,\n  getDailyCounts,\n} from '../utils/dataHelpers';\n\nconst emptyOrders: Orders = {\n  SolarBuddhica: [],\n  Antiqua: [],\n  Zerpfy: [],\n};\nconst emptyCounts: Counts = {\n  SolarBuddhica: {\n    vaccinations: 0,\n    orders: 0,\n    doses: 0,\n    expiredDoses: 0,\n    expiredOrders: 0,\n    consumedOrders: 0,\n    expiringDoses: 0,\n    arrivedDoses: 0,\n    arrivedOrders: 0,\n  },\n  Antiqua: {\n    vaccinations: 0,\n    orders: 0,\n    doses: 0,\n    expiredDoses: 0,\n    expiredOrders: 0,\n    consumedOrders: 0,\n    expiringDoses: 0,\n    arrivedDoses: 0,\n    arrivedOrders: 0,\n  },\n  Zerpfy: {\n    vaccinations: 0,\n    orders: 0,\n    doses: 0,\n    expiredDoses: 0,\n    expiredOrders: 0,\n    consumedOrders: 0,\n    expiringDoses: 0,\n    arrivedDoses: 0,\n    arrivedOrders: 0,\n  },\n};\n\nconst useData = ({ orders, date }: DateAndOrders): DataOutput => {\n  const [ordersBeforeDate, setOrdersBeforeDate] = useState(emptyOrders);\n  const [cumulativeCounts, setCumulativeCounts] = useState(emptyCounts);\n  const [ordersOnDate, setOrdersOnDate] = useState(emptyOrders);\n  const [countsOnDate, setCountsOnDate] = useState(emptyCounts);\n\n  useEffect(() => {\n    // Order arrays\n    const priorOrders = getOrdersBeforeDate({ orders, date });\n    const ordersToday = getOrdersOnDate({ orders, date });\n    // various counts\n    const priorCounts = getCumulativeCounts({ orders: priorOrders, date });\n    const countsToday = getDailyCounts({ orders: priorOrders, date });\n    setOrdersBeforeDate(priorOrders);\n    setCumulativeCounts(priorCounts);\n    setOrdersOnDate(ordersToday);\n    setCountsOnDate(countsToday);\n  }, [date, orders]);\n  // how many vaxes used\n\n  // how many bottles have expired on that day\n\n  // how many vaccines expired before use\n\n  // how many usable vaccines\n  // const test = [\n  //   ...orders.Antiqua,\n  //   ...orders.SolarBuddhica,\n  //   ...orders.Zerpfy,\n  // ].map((order) => order.injections);\n\n  // console.log(test.reduce((a, b) => a + b));\n\n  // how many vaccines will expire within 4 days\n\n  return {\n    ordersBeforeDate,\n    cumulativeCounts,\n    ordersOnDate,\n    countsOnDate,\n  };\n};\n\nexport default useData;\n","import { Dispatch, SetStateAction } from 'react';\nimport {\n  AppBar, Toolbar, Typography,\n} from '@material-ui/core';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nconst TopBar = ({ date, setDate }: {\n  date: Date|null, setDate: Dispatch<SetStateAction<Date|null>>\n}) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h4\" style={{ marginRight: '20px' }}>\n        VaxData\n      </Typography>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          disableToolbar\n          className=\"date-picker\"\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          label=\"Pick date to examine\"\n          value={date}\n          onChange={(newDate) => setDate(newDate)}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n      </MuiPickersUtilsProvider>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default TopBar;\n","import { ChartData, Counts, ProducerName } from '../types';\n\nconst producers = [\n  ProducerName.SolarBuddhica,\n  ProducerName.Antiqua,\n  ProducerName.Zerpfy,\n];\n\nconst getAvailableDoses = (counts: Counts[keyof Counts]) => (\n  counts.doses - counts.expiredDoses - counts.vaccinations\n);\n\nconst getAvailableOrders = (counts: Counts[keyof Counts]) => (\n  counts.orders - counts.expiredOrders - counts.consumedOrders\n);\n\nexport const vaccineCountsToChart = (counts: Counts): ChartData => {\n  const chartData = producers.map((producer) => ({\n    producer,\n    arrived: counts[producer].arrivedDoses,\n    used: counts[producer].vaccinations,\n    available: getAvailableDoses(counts[producer]),\n    expired: counts[producer].expiredDoses,\n    expiring: counts[producer].expiringDoses,\n  }));\n\n  const totals = {\n    producer: 'total',\n    used:\n      counts.SolarBuddhica.vaccinations\n      + counts.Antiqua.vaccinations\n      + counts.Zerpfy.vaccinations,\n    available:\n      getAvailableDoses(counts.SolarBuddhica)\n      + getAvailableDoses(counts.Antiqua)\n      + getAvailableDoses(counts.Zerpfy),\n    expired:\n      counts.SolarBuddhica.expiredDoses\n      + counts.Antiqua.expiredDoses\n      + counts.Zerpfy.expiredDoses,\n    expiring:\n      counts.SolarBuddhica.expiringDoses\n      + counts.Antiqua.expiringDoses\n      + counts.Zerpfy.expiringDoses,\n    arrived:\n      counts.SolarBuddhica.arrivedDoses\n      + counts.Antiqua.arrivedDoses\n      + counts.Zerpfy.arrivedDoses,\n  };\n\n  return [...chartData, totals] as ChartData;\n};\n\nexport const orderCountsToBarChart = (counts: Counts): ChartData => {\n  const chartData = producers.map((producer) => ({\n    producer,\n    arrived: counts[producer].arrivedOrders,\n    available: getAvailableOrders(counts[producer]),\n    expired: counts[producer].expiredOrders,\n    consumed: counts[producer].consumedOrders,\n  }));\n\n  const totals = {\n    producer: 'total',\n    available:\n      getAvailableOrders(counts.Antiqua)\n      + getAvailableOrders(counts.SolarBuddhica)\n      + getAvailableOrders(counts.Zerpfy),\n    expired:\n      counts.SolarBuddhica.expiredOrders\n      + counts.Antiqua.expiredOrders\n      + counts.Zerpfy.expiredOrders,\n    consumed:\n      counts.Antiqua.consumedOrders\n      + counts.SolarBuddhica.consumedOrders\n      + counts.Zerpfy.consumedOrders,\n    arrived:\n      counts.SolarBuddhica.arrivedOrders\n      + counts.Antiqua.arrivedOrders\n      + counts.Zerpfy.arrivedOrders,\n  };\n\n  return [...chartData, totals] as ChartData;\n};\n","import { ResponsiveBar } from '@nivo/bar';\nimport { Card, Typography } from '@material-ui/core';\nimport { ChartData } from '../types';\n\ntype ChartInput = { data: ChartData, keys: string[], index: string, header: string}\n\nconst BarChart = ({\n  data, keys, index, header,\n}:ChartInput) => (\n  <Card className=\"chart\">\n    <Typography variant=\"h5\">{ header }</Typography>\n    <ResponsiveBar\n      data={data}\n      keys={keys}\n      indexBy={index}\n      margin={{\n        top: 10, right: 120, bottom: 50, left: 60,\n      }}\n      padding={0.3}\n      indexScale={{ type: 'band', round: true }}\n      colors={{ scheme: 'category10' }}\n      borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n      axisBottom={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legendPosition: 'middle',\n        legendOffset: 32,\n      }}\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n      legends={[\n        {\n          dataFrom: 'keys',\n          anchor: 'bottom-right',\n          direction: 'column',\n          justify: false,\n          translateX: 120,\n          translateY: 0,\n          itemsSpacing: 2,\n          itemWidth: 100,\n          itemHeight: 20,\n          itemDirection: 'left-to-right',\n          itemOpacity: 0.85,\n          symbolSize: 20,\n          effects: [\n            {\n              on: 'hover',\n              style: {\n                itemOpacity: 1,\n              },\n            },\n          ],\n        },\n      ]}\n    />\n  </Card>\n);\n\nexport default BarChart;\n","import { orderCountsToBarChart, vaccineCountsToChart } from '../utils/chartFormatters';\nimport { DataOutput } from '../types';\nimport BarChart from './BarChart';\n\nconst ChartContainer = ({ data }: {data: DataOutput}) => {\n  const { cumulativeCounts, countsOnDate } = data;\n  return (\n    <div className=\"chart-container\">\n      <BarChart\n        header=\"Cumulative Orders\"\n        data={orderCountsToBarChart(cumulativeCounts)}\n        keys={['available', 'consumed', 'expired']}\n        index=\"producer\"\n      />\n      <BarChart\n        header=\"Cumulative doses\"\n        data={vaccineCountsToChart(cumulativeCounts)}\n        keys={['available', 'used', 'expired']}\n        index=\"producer\"\n      />\n      <BarChart\n        header=\"Orders Today\"\n        data={orderCountsToBarChart(countsOnDate)}\n        keys={['arrived', 'expired']}\n        index=\"producer\"\n      />\n      <BarChart\n        header=\"Doses Today\"\n        data={vaccineCountsToChart(countsOnDate)}\n        keys={['used', 'expired', 'arrived']}\n        index=\"producer\"\n      />\n      <BarChart\n        header=\"Doses expiring within 10 days\"\n        data={vaccineCountsToChart(cumulativeCounts)}\n        keys={['expiring']}\n        index=\"producer\"\n      />\n    </div>\n  );\n};\n\nexport default ChartContainer;\n","import './App.css';\nimport { useState, useEffect } from 'react';\nimport useFetchOrders from './hooks/useFetchOrders';\nimport useData from './hooks/useData';\nimport { getLatestDate } from './utils/dataHelpers';\nimport TopBar from './components/TopBar';\nimport ChartContainer from './components/ChartContainer';\n\nfunction App() {\n  const { orders } = useFetchOrders();\n  const [date, setDate] = useState<Date | null>(new Date());\n  const data = useData({\n    date: date || new Date(),\n    orders,\n  });\n\n  useEffect(() => {\n    setDate(getLatestDate(orders));\n  }, [orders]);\n\n  return (\n    <div className=\"App\">\n      <TopBar setDate={setDate} date={date} />\n      <ChartContainer data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}